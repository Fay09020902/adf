{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "YJDF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/FilterOrderLoadToODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[proc_FilterOrderByOrderDate]",
								"storedProcedureParameters": {
									"EndDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"StartDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SalespersonPersonID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalespersonPersonID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "PickedByPersonID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PickedByPersonID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ContactPersonID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ContactPersonID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BackorderOrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "BackorderOrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "ExpectedDeliveryDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "ExpectedDeliveryDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CustomerPurchaseOrderNumber",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CustomerPurchaseOrderNumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "IsUndersupplyBackordered",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "IsUndersupplyBackordered",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DeliveryInstructions",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "DeliveryInstructions",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "InternalComments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "InternalComments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PickingCompletedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "PickingCompletedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "LastEditedBy",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "LastEditedBy",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "LastEditedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "LastEditedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OrderTable_OLTP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OrderFIltered_ODS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadOrderStagingByJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Join_Order_Orderlines_Write_To_Staging]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Table_ODS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLTPToODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT *\nFROM \n(SELECT *\nFROM WideWorldImporters.INFORMATION_SCHEMA.TABLES) T\nWHERE TABLE_SCHEMA = 'Adf' and(T.TABLE_NAME = 'StockItems' OR T.TABLE_NAME = 'People')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyTableToODS",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SQLOltpTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQLOdsTables",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"SchemaName": "Staging"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadDimPeopleTyopeTwo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "delete columns from staging, ony keep columns from dim",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PeopleStaingTable",
								"type": "DatasetReference"
							},
							"name": "PeopleStaging"
						},
						{
							"dataset": {
								"referenceName": "PeopleDim_DW",
								"type": "DatasetReference"
							},
							"name": "PeopleDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PeopleDim_DW",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "PeopleDim_DW",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "AddingCurrentRow"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ExistingRows"
						},
						{
							"name": "Select2"
						},
						{
							"name": "UpdateCurrentRow"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tPersonID as integer,\n\t\tFullName as string,\n\t\tPreferredName as string,\n\t\tIsPermittedToLogon as boolean,\n\t\tLogonName as string,\n\t\tIsExternalLogonProvider as boolean,\n\t\tHashedPassword as binary,\n\t\tIsSystemUser as boolean,\n\t\tIsEmployee as boolean,\n\t\tIsSalesperson as boolean,\n\t\tUserPreferences as string,\n\t\tPhoneNumber as string,\n\t\tFaxNumber as string,\n\t\tEmailAddress as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PeopleStaging\nsource(output(\n\t\tId as integer,\n\t\tPersonID as integer,\n\t\tFullName as string,\n\t\tPreferredName as string,\n\t\tIsPermittedToLogon as boolean,\n\t\tLogonName as string,\n\t\tIsExternalLogonProvider as boolean,\n\t\tHashedPassword as binary,\n\t\tIsSystemUser as boolean,\n\t\tIsEmployee as boolean,\n\t\tIsSalesperson as boolean,\n\t\tUserPreferences as string,\n\t\tPhoneNumber as string,\n\t\tFaxNumber as string,\n\t\tEmailAddress as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PeopleDim\nPeopleStaging derive(CurrentRow = 1) ~> AddingCurrentRow\nPeopleDim select(mapColumn(\n\t\tExistingId = Id,\n\t\tExistingPersonID = PersonID,\n\t\tExistingFullName = FullName,\n\t\tExistingPreferredName = PreferredName,\n\t\tExistingIsPermittedToLogon = IsPermittedToLogon,\n\t\tExistingLogonName = LogonName,\n\t\tExistingIsExternalLogonProvider = IsExternalLogonProvider,\n\t\tExistingHashedPassword = HashedPassword,\n\t\tExistingIsSystemUser = IsSystemUser,\n\t\tExistingIsEmployee = IsEmployee,\n\t\tExistingIsSalesperson = IsSalesperson,\n\t\tExistingUserPreferences = UserPreferences,\n\t\tExistingPhoneNumber = PhoneNumber,\n\t\tExistingFaxNumber = FaxNumber,\n\t\tExistingEmailAddress = EmailAddress,\n\t\tExistingPhoto = Photo,\n\t\tExistingCustomFields = CustomFields,\n\t\tExistingLastEditedBy = LastEditedBy,\n\t\tExistingValidFrom = ValidFrom,\n\t\tExistingValidTo = ValidTo,\n\t\tExistingCurrentRow = CurrentRow\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nPeopleStaging, Select1 lookup(PersonID == ExistingId,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter(!isNull(ExistingPersonID)) ~> ExistingRows\nExistingRows select(mapColumn(\n\t\tExistingId,\n\t\tExistingPersonID,\n\t\tExistingFullName,\n\t\tExistingPreferredName,\n\t\tExistingIsPermittedToLogon,\n\t\tExistingLogonName,\n\t\tExistingIsExternalLogonProvider,\n\t\tExistingHashedPassword,\n\t\tExistingIsSystemUser,\n\t\tExistingIsEmployee,\n\t\tExistingIsSalesperson,\n\t\tExistingUserPreferences,\n\t\tExistingPhoneNumber,\n\t\tExistingFaxNumber,\n\t\tExistingEmailAddress,\n\t\tExistingPhoto,\n\t\tExistingCustomFields,\n\t\tExistingLastEditedBy,\n\t\tExistingValidFrom,\n\t\tExistingValidTo,\n\t\tExistingCurrentRow\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 derive(ExistingCurrentRow = 0) ~> UpdateCurrentRow\nUpdateCurrentRow alterRow(updateIf(1==1)) ~> AlterRow1\nAddingCurrentRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as integer,\n\t\tPersonID as integer,\n\t\tFullName as string,\n\t\tPreferredName as string,\n\t\tIsPermittedToLogon as boolean,\n\t\tLogonName as string,\n\t\tIsExternalLogonProvider as boolean,\n\t\tHashedPassword as binary,\n\t\tIsSystemUser as boolean,\n\t\tIsEmployee as boolean,\n\t\tIsSalesperson as boolean,\n\t\tUserPreferences as string,\n\t\tPhoneNumber as string,\n\t\tFaxNumber as string,\n\t\tEmailAddress as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPersonID,\n\t\tFullName,\n\t\tPreferredName,\n\t\tIsPermittedToLogon,\n\t\tLogonName,\n\t\tIsExternalLogonProvider,\n\t\tHashedPassword,\n\t\tIsSystemUser,\n\t\tIsEmployee,\n\t\tIsSalesperson,\n\t\tUserPreferences,\n\t\tPhoneNumber,\n\t\tFaxNumber,\n\t\tEmailAddress,\n\t\tPhoto,\n\t\tCustomFields,\n\t\tLastEditedBy,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tCurrentRow\n\t)) ~> sink1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as integer,\n\t\tPersonID as integer,\n\t\tFullName as string,\n\t\tPreferredName as string,\n\t\tIsPermittedToLogon as boolean,\n\t\tLogonName as string,\n\t\tIsExternalLogonProvider as boolean,\n\t\tHashedPassword as binary,\n\t\tIsSystemUser as boolean,\n\t\tIsEmployee as boolean,\n\t\tIsSalesperson as boolean,\n\t\tUserPreferences as string,\n\t\tPhoneNumber as string,\n\t\tFaxNumber as string,\n\t\tEmailAddress as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tId = ExistingId,\n\t\tPersonID = ExistingPersonID,\n\t\tFullName = ExistingFullName,\n\t\tPreferredName = ExistingPreferredName,\n\t\tIsPermittedToLogon = ExistingIsPermittedToLogon,\n\t\tLogonName = ExistingLogonName,\n\t\tIsExternalLogonProvider = ExistingIsExternalLogonProvider,\n\t\tHashedPassword = ExistingHashedPassword,\n\t\tIsSystemUser = ExistingIsSystemUser,\n\t\tIsEmployee = ExistingIsEmployee,\n\t\tIsSalesperson = ExistingIsSalesperson,\n\t\tUserPreferences = ExistingUserPreferences,\n\t\tPhoneNumber = ExistingPhoneNumber,\n\t\tFaxNumber = ExistingFaxNumber,\n\t\tEmailAddress = ExistingEmailAddress,\n\t\tPhoto = ExistingPhoto,\n\t\tCustomFields = ExistingCustomFields,\n\t\tLastEditedBy = ExistingLastEditedBy,\n\t\tValidFrom = ExistingValidFrom,\n\t\tValidTo = ExistingValidTo,\n\t\tCurrentRow = ExistingCurrentRow\n\t)) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadDimStockTypeTwo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "delete columns from staging, ony keep columns from dim",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StockItemsStagingTable",
								"type": "DatasetReference"
							},
							"name": "StockItemStaging"
						},
						{
							"dataset": {
								"referenceName": "StockItemsDim_DW",
								"type": "DatasetReference"
							},
							"name": "StockItemDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "StockItemsDim_DW",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "StockItemsDim_DW",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "AddingCurrentRow"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ExistingRows"
						},
						{
							"name": "SelectDimColumn"
						},
						{
							"name": "UpdateCurrentRow"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tStockItemID as integer,\n\t\tStockItemName as string,\n\t\tSupplierID as integer,\n\t\tColorID as integer,\n\t\tUnitPackageID as integer,\n\t\tOuterPackageID as integer,\n\t\tBrand as string,\n\t\tSize as string,\n\t\tLeadTimeDays as integer,\n\t\tQuantityPerOuter as integer,\n\t\tIsChillerStock as boolean,\n\t\tBarcode as string,\n\t\tTaxRate as decimal(18,3),\n\t\tUnitPrice as decimal(18,2),\n\t\tRecommendedRetailPrice as decimal(18,2),\n\t\tTypicalWeightPerUnit as decimal(18,3),\n\t\tMarketingComments as string,\n\t\tInternalComments as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StockItemStaging\nsource(output(\n\t\tId as integer,\n\t\tStockItemID as integer,\n\t\tStockItemName as string,\n\t\tSupplierID as integer,\n\t\tColorID as integer,\n\t\tUnitPackageID as integer,\n\t\tOuterPackageID as integer,\n\t\tBrand as string,\n\t\tSize as string,\n\t\tLeadTimeDays as integer,\n\t\tQuantityPerOuter as integer,\n\t\tIsChillerStock as boolean,\n\t\tBarcode as string,\n\t\tTaxRate as decimal(18,3),\n\t\tUnitPrice as decimal(18,2),\n\t\tRecommendedRetailPrice as decimal(18,2),\n\t\tTypicalWeightPerUnit as decimal(18,3),\n\t\tMarketingComments as string,\n\t\tInternalComments as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StockItemDim\nStockItemStaging derive(CurrentRow = 1) ~> AddingCurrentRow\nStockItemDim select(mapColumn(\n\t\tExistingId = Id,\n\t\tExistingStockItemID = StockItemID,\n\t\tExistingStockItemName = StockItemName,\n\t\tExistingSupplierID = SupplierID,\n\t\tExistingColorID = ColorID,\n\t\tExistingUnitPackageID = UnitPackageID,\n\t\tExistingOuterPackageID = OuterPackageID,\n\t\tExistingBrand = Brand,\n\t\tExistingSize = Size,\n\t\tExistingLeadTimeDays = LeadTimeDays,\n\t\tExistingQuantityPerOuter = QuantityPerOuter,\n\t\tExistingIsChillerStock = IsChillerStock,\n\t\tExistingBarcode = Barcode,\n\t\tExistingTaxRate = TaxRate,\n\t\tExistingUnitPrice = UnitPrice,\n\t\tExistingRecommendedRetailPrice = RecommendedRetailPrice,\n\t\tExistingTypicalWeightPerUnit = TypicalWeightPerUnit,\n\t\tExistingMarketingComments = MarketingComments,\n\t\tExistingInternalComments = InternalComments,\n\t\tExistingPhoto = Photo,\n\t\tExistingCustomFields = CustomFields,\n\t\tExistingLastEditedBy = LastEditedBy,\n\t\tExistingValidFrom = ValidFrom,\n\t\tExistingValidTo = ValidTo,\n\t\tExistingCurrentRow = CurrentRow\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nStockItemStaging, Select1 lookup(StockItemID == ExistingStockItemID,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter(!isNull(ExistingStockItemID)) ~> ExistingRows\nExistingRows select(mapColumn(\n\t\tExistingId,\n\t\tExistingStockItemID,\n\t\tExistingStockItemName,\n\t\tExistingSupplierID,\n\t\tExistingColorID,\n\t\tExistingUnitPackageID,\n\t\tExistingOuterPackageID,\n\t\tExistingBrand,\n\t\tExistingSize,\n\t\tExistingLeadTimeDays,\n\t\tExistingQuantityPerOuter,\n\t\tExistingIsChillerStock,\n\t\tExistingBarcode,\n\t\tExistingTaxRate,\n\t\tExistingUnitPrice,\n\t\tExistingRecommendedRetailPrice,\n\t\tExistingTypicalWeightPerUnit,\n\t\tExistingMarketingComments,\n\t\tExistingInternalComments,\n\t\tExistingPhoto,\n\t\tExistingCustomFields,\n\t\tExistingLastEditedBy,\n\t\tExistingValidFrom,\n\t\tExistingValidTo,\n\t\tExistingCurrentRow\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimColumn\nSelectDimColumn derive(ExistingCurrentRow = 0) ~> UpdateCurrentRow\nUpdateCurrentRow alterRow(updateIf(1==1)) ~> AlterRow1\nAddingCurrentRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as integer,\n\t\tStockItemID as integer,\n\t\tStockItemName as string,\n\t\tSupplierID as integer,\n\t\tColorID as integer,\n\t\tUnitPackageID as integer,\n\t\tOuterPackageID as integer,\n\t\tBrand as string,\n\t\tSize as string,\n\t\tLeadTimeDays as integer,\n\t\tQuantityPerOuter as integer,\n\t\tIsChillerStock as boolean,\n\t\tBarcode as string,\n\t\tTaxRate as decimal(18,3),\n\t\tUnitPrice as decimal(18,2),\n\t\tRecommendedRetailPrice as decimal(18,2),\n\t\tTypicalWeightPerUnit as decimal(18,3),\n\t\tMarketingComments as string,\n\t\tInternalComments as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as integer,\n\t\tStockItemID as integer,\n\t\tStockItemName as string,\n\t\tSupplierID as integer,\n\t\tColorID as integer,\n\t\tUnitPackageID as integer,\n\t\tOuterPackageID as integer,\n\t\tBrand as string,\n\t\tSize as string,\n\t\tLeadTimeDays as integer,\n\t\tQuantityPerOuter as integer,\n\t\tIsChillerStock as boolean,\n\t\tBarcode as string,\n\t\tTaxRate as decimal(18,3),\n\t\tUnitPrice as decimal(18,2),\n\t\tRecommendedRetailPrice as decimal(18,2),\n\t\tTypicalWeightPerUnit as decimal(18,3),\n\t\tMarketingComments as string,\n\t\tInternalComments as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tId = ExistingId,\n\t\tStockItemID = ExistingStockItemID,\n\t\tStockItemName = ExistingStockItemName,\n\t\tSupplierID = ExistingSupplierID,\n\t\tColorID = ExistingColorID,\n\t\tUnitPackageID = ExistingUnitPackageID,\n\t\tOuterPackageID = ExistingOuterPackageID,\n\t\tBrand = ExistingBrand,\n\t\tSize = ExistingSize,\n\t\tLeadTimeDays = ExistingLeadTimeDays,\n\t\tQuantityPerOuter = ExistingQuantityPerOuter,\n\t\tIsChillerStock = ExistingIsChillerStock,\n\t\tBarcode = ExistingBarcode,\n\t\tTaxRate = ExistingTaxRate,\n\t\tUnitPrice = ExistingUnitPrice,\n\t\tRecommendedRetailPrice = ExistingRecommendedRetailPrice,\n\t\tTypicalWeightPerUnit = ExistingTypicalWeightPerUnit,\n\t\tMarketingComments = ExistingMarketingComments,\n\t\tInternalComments = ExistingInternalComments,\n\t\tPhoto = ExistingPhoto,\n\t\tCustomFields = ExistingCustomFields,\n\t\tLastEditedBy = ExistingLastEditedBy,\n\t\tValidFrom = ExistingValidFrom,\n\t\tValidTo = ExistingValidTo,\n\t\tCurrentRow = ExistingCurrentRow\n\t)) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFactOrder')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrderStaging_ODS",
								"type": "DatasetReference"
							},
							"name": "StagingOrder"
						},
						{
							"dataset": {
								"referenceName": "StockItemsDim_DW",
								"type": "DatasetReference"
							},
							"name": "DimStockItems"
						},
						{
							"dataset": {
								"referenceName": "PeopleDim_DW",
								"type": "DatasetReference"
							},
							"name": "DimPeople"
						},
						{
							"dataset": {
								"referenceName": "FactOrderDW",
								"type": "DatasetReference"
							},
							"name": "FactOrder"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactOrderDW",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "JoinDimPeople"
						},
						{
							"name": "JoinDimStockItems"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "JoinFactOrder"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Select5"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Customer Key} as integer,\n\t\t{Stock Item Key} as integer,\n\t\t{Order Date Key} as date,\n\t\t{Picked Date Key} as date,\n\t\t{Salesperson Key} as integer,\n\t\t{Picker Key} as integer,\n\t\t{WWI Order ID} as integer,\n\t\t{WWI Backorder ID} as integer,\n\t\tDescription as string,\n\t\tPackage as string,\n\t\tQuantity as integer,\n\t\t{Unit Price} as decimal(18,2),\n\t\t{Tax Rate} as decimal(18,3),\n\t\t{Last Modified When} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingOrder\nsource(output(\n\t\tId as integer,\n\t\tStockItemID as integer,\n\t\tStockItemName as string,\n\t\tSupplierID as integer,\n\t\tColorID as integer,\n\t\tUnitPackageID as integer,\n\t\tOuterPackageID as integer,\n\t\tBrand as string,\n\t\tSize as string,\n\t\tLeadTimeDays as integer,\n\t\tQuantityPerOuter as integer,\n\t\tIsChillerStock as boolean,\n\t\tBarcode as string,\n\t\tTaxRate as decimal(18,3),\n\t\tUnitPrice as decimal(18,2),\n\t\tRecommendedRetailPrice as decimal(18,2),\n\t\tTypicalWeightPerUnit as decimal(18,3),\n\t\tMarketingComments as string,\n\t\tInternalComments as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimStockItems\nsource(output(\n\t\tId as integer,\n\t\tPersonID as integer,\n\t\tFullName as string,\n\t\tPreferredName as string,\n\t\tIsPermittedToLogon as boolean,\n\t\tLogonName as string,\n\t\tIsExternalLogonProvider as boolean,\n\t\tHashedPassword as binary,\n\t\tIsSystemUser as boolean,\n\t\tIsEmployee as boolean,\n\t\tIsSalesperson as boolean,\n\t\tUserPreferences as string,\n\t\tPhoneNumber as string,\n\t\tFaxNumber as string,\n\t\tEmailAddress as string,\n\t\tPhoto as binary,\n\t\tCustomFields as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tCurrentRow as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimPeople\nsource(output(\n\t\tId as integer,\n\t\t{Customer Key} as integer,\n\t\t{Stock Item Key} as integer,\n\t\t{Order Date Key} as date,\n\t\t{Picked Date Key} as date,\n\t\t{Salesperson Key} as integer,\n\t\t{Picker Key} as integer,\n\t\t{WWI Order ID} as integer,\n\t\t{WWI Backorder ID} as integer,\n\t\tDescription as string,\n\t\tPackage as string,\n\t\tQuantity as integer,\n\t\t{Unit Price} as decimal(18,2),\n\t\t{Tax Rate} as decimal(18,3),\n\t\t{Last Modified When} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactOrder\nStagingOrder, Select2 join({Customer Key} == CustomerID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimPeople\nJoinDimPeople, Select3 join({Stock Item Key} == StockItemID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimStockItems\nFilter2 select(mapColumn(\n\t\tCustomerKey = Id,\n\t\tCustomerID = PersonID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nFilter1 select(mapColumn(\n\t\tStockItemKey = Id,\n\t\tStockItemID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nDimStockItems filter(CurrentRow) ~> Filter1\nDimPeople filter(CurrentRow) ~> Filter2\nJoinDimStockItems, FactOrder join(CustomerKey == FactOrder@{Customer Key}\n\t&& StockItemKey == FactOrder@{Stock Item Key}\n\t&& StagingOrder@{Order Date Key} == FactOrder@{Order Date Key},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinFactOrder\nFactOrder select(mapColumn(\n\t\t{Customer Key},\n\t\t{Stock Item Key},\n\t\t{Order Date Key}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nJoinFactOrder filter(isNull(FactOrder@{Stock Item Key})) ~> Filter3\nFilter3 select(mapColumn(\n\t\t{Picked Date Key} = StagingOrder@{Picked Date Key},\n\t\t{Order Date Key} = StagingOrder@{Order Date Key},\n\t\t{Salesperson Key} = StagingOrder@{Salesperson Key},\n\t\t{Picker Key} = StagingOrder@{Picker Key},\n\t\t{WWI Order ID} = StagingOrder@{WWI Order ID},\n\t\t{WWI Backorder ID} = StagingOrder@{WWI Backorder ID},\n\t\tDescription = StagingOrder@Description,\n\t\tPackage = StagingOrder@Package,\n\t\tQuantity = StagingOrder@Quantity,\n\t\t{Unit Price} = StagingOrder@{Unit Price},\n\t\t{Tax Rate} = StagingOrder@{Tax Rate},\n\t\t{Last Modified When} = StagingOrder@{Last Modified When},\n\t\tCustomerKey,\n\t\tStockItemKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect3 derive(each(match(1==1), 'Pre_'+$$ = $$)) ~> DerivedColumn1\nSelect5 alterRow(insertIf(1==1)) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Picked Date Key},\n\t\t{Order Date Key},\n\t\t{Salesperson Key},\n\t\t{Picker Key},\n\t\t{WWI Order ID},\n\t\t{WWI Backorder ID},\n\t\tDescription,\n\t\tPackage,\n\t\tQuantity,\n\t\t{Unit Price},\n\t\t{Tax Rate},\n\t\t{Last Modified When},\n\t\t{Customer Key} = CustomerKey,\n\t\t{Stock Item Key} = StockItemKey\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFactOrder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadFactOrder",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadFactOrder",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingOrder": {},
									"DimStockItems": {},
									"DimPeople": {},
									"FactOrder": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadFactOrder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdatingDimPeople')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDimPeopleTyopeTwo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadDimPeopleTyopeTwo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PeopleStaging": {},
									"PeopleDim": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadDimPeopleTyopeTwo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdatingDimStockItems')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDimStockTypeTwo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadDimStockTypeTwo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StockItemStaging": {},
									"StockItemDim": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadDimStockTypeTwo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OLTPToODS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "OLTPToODS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "UpdatingDimPeople",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OLTPToODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "UpdatingDimPeople",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "UpdatingDimStockItems",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OLTPToODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "UpdatingDimStockItems",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_OrderLines_To_Ods",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_OrderLines_To_Ods",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FilterOrderLoadToODS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FilterOrderLoadToODS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"StartDate": {
									"value": "@pipeline().parameters.StartDate",
									"type": "Expression"
								},
								"EndDate": {
									"value": "@pipeline().parameters.EndDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadOrderStagingByJoin",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_OrderLines_To_Ods",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "FilterOrderLoadToODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadOrderStagingByJoin",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LoadFactOrder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdatingDimStockItems",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "UpdatingDimPeople",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LoadOrderStagingByJoin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadFactOrder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StartDate": {
						"type": "string"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/OLTPToODS')]",
				"[concat(variables('factoryId'), '/pipelines/UpdatingDimPeople')]",
				"[concat(variables('factoryId'), '/pipelines/UpdatingDimStockItems')]",
				"[concat(variables('factoryId'), '/pipelines/FilterOrderLoadToODS')]",
				"[concat(variables('factoryId'), '/pipelines/LoadOrderStagingByJoin')]",
				"[concat(variables('factoryId'), '/pipelines/LoadFactOrder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL pipeline_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OLTPToODS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "OLTPToODS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "UpdatingDimPeople",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OLTPToODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "UpdatingDimPeople",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "UpdatingDimStockItems",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OLTPToODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "UpdatingDimStockItems",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_OrderLines_To_Ods",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_OrderLines_To_Ods",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FilterOrderLoadToODS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FilterOrderLoadToODS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"StartDate": {
									"value": "@pipeline().parameters.LastModifyTime",
									"type": "Expression"
								},
								"EndDate": {
									"value": "@pipeline().parameters.NewWatermarkvalue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadOrderStagingByJoin",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_OrderLines_To_Ods",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "FilterOrderLoadToODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadOrderStagingByJoin",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LoadFactOrder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdatingDimStockItems",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "UpdatingDimPeople",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LoadOrderStagingByJoin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadFactOrder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LastModifyTime": {
						"type": "string"
					},
					"NewWatermarkvalue": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/OLTPToODS')]",
				"[concat(variables('factoryId'), '/pipelines/UpdatingDimPeople')]",
				"[concat(variables('factoryId'), '/pipelines/UpdatingDimStockItems')]",
				"[concat(variables('factoryId'), '/pipelines/FilterOrderLoadToODS')]",
				"[concat(variables('factoryId'), '/pipelines/LoadOrderStagingByJoin')]",
				"[concat(variables('factoryId'), '/pipelines/LoadFactOrder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELT pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupLastModified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select WatermarkValue from watermarktable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(LastEditedWhen) as NewWatermarkValue from Sales.Orders",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OrderTable_OLTP",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ETL pipeline_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ETL pipeline_copy1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"LastModifyTime": {
									"value": "@activity('LookupLastModified').output",
									"type": "Expression"
								},
								"NewWatermarkvalue": {
									"value": "@activity('LookupNewWaterMark').output",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ETL pipeline_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[update_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('LookupNewWaterMark').output",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "OLTP",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ETL pipeline_copy1')]"
			]
		}
	]
}